%%% This is a program that controls 2 channels of signals from function generators, and measure the sideband signals generated by the time-varying meta-units in a rectangular waveguide 

clear;

%%
warning on;
% close all open instruments
objs = instrfind;
fclose(objs)


%%
%%%% Arbitrary Function Generator connection and settings
%%%%%%%%%%%%%%%%%%% connect AFG 
% assign visa of AFG
vFG = visa('ni','GPIB0::11::INSTR');
% define buffersize for output 
vFG.outputbuffersize = 10000;

% connect to AFG
fopen(vFG);
%fprintf(vFG, '*IDN?') %%% 

% define signal
% frequency
Freq=1*1e3;  
% time step
dt=0.001/Freq;   
% time
t=0:dt:1/Freq-dt;   


%%%% Signal Analyzer connection and settings

vSA = visa('ni','GPIB0::21::INSTR');
vSA.inputbuffersize = 20000;
fopen(vSA);

% Show display window
fwrite(vSA, 'SYST:DISP:UPD ON');
% define central frequency
fwrite(vSA, 'FREQ:CENT 3.64 GHz');
% define frequency span
fwrite(vSA, 'FREQ:SPAN 60 MHz');
% define measured bandwidth
fwrite(vSA, 'BAND 40 kHz');
% define video bandwidth
fwrite(vSA, 'BAND:VIDEO 100 kHz');
% number of sweep point
num_points = 601;
fprintf(vSA, 'SWEEP:POINTS %d\n', num_points);

% define data type as ASCII
fwrite(vSA, 'FORM ASCII');

% first point of harmonic peak
n_1=1;
% seperation between harmonic peak
dn=20;
% final point of harmonic peak
n_end=num_points-n_1+1;

% peak position in the measured data array
peakposition=n_1:dn:n_end;
% maximum order of harmonics
nmax=(length(peakposition)-1)/2;
% define which objective harmonic to be optimized
n_objhm=nmax; % corresponds to -1 order

%%%%%%% create session to control switch USB6525

% Add digital output channel
sUSB=daq.createSession('ni');
addDigitalChannel(sUSB,'Dev1','port0/line0','OutputOnly');
addDigitalChannel(sUSB,'Dev1','port0/line1','OutputOnly');


%%%%%%% control of signal generator HP-8637B
%
vSG = visa('ni','GPIB0::19::INSTR');
vSG.inputbuffersize = 10000;
fopen(vSG);
%
% power of CW signal in dBm
power_dbm=-3;
% frequency of CW signal 
cwfr=3.64;
Fun_SG8673B(vSG,cwfr,power_dbm);
%fclose(vSG);
%%
%A test of randomly changed waveforms and the corresponding spectra
flag_test=0;


if flag_test==1
tic
for n=1:5

% amplitude of coefficient
a1=1; a2=1.0;
% phase
ph1=0; ph2=pi/3*random('unif',-1,1);
% signal components
signal_1=a1*sin(2*pi*Freq*t+ph1)+random('unif',-1,1)*sin(2*pi*2*Freq*t+2*ph1);
signal_2=a2*sin(2*pi*Freq*t+ph2)+random('unif',-1,1)*sin(2*pi*2*Freq*t+2*ph2);


% normalized signal to maximum amplitude 1
signal_1n=1.*signal_1./max(abs(signal_1));
signal_2n=1.*signal_2./max(abs(signal_2));

% Vpp amplitude and offset of output voltage
am1=2;am2=2
offset1=2.2;offset2=2.1;

Fun_AFG(vFG,signal_1n,signal_2n,am1,am2,offset1,offset2);
%fclose(vFG);

%  for S21
line0=1;line1=0;
USB6525(sUSB,line0,line1);
specS21(:,n)=Fun_SA(vSA,num_points);

%  for S11
line0=0;line1=1;
USB6525(sUSB,line0,line1);
specS11(:,n)=Fun_SA(vSA,num_points);



end

toc

%%
xx=ones(num_points,n);
yy=ones(num_points,n);

for jj=1:n
yy(:,jj)=jj;
end

for ii=1:num_points
xx(ii,:)=ii;   
end


figure(1);
subplot(1,2,1)
plot3(xx,yy,specS21(:,1:n));

subplot(1,2,2)
plot3(xx,yy,specS11(:,1:n));
hold off;

end

%%

%%%%%%%%% OPTIMIZATION

% initial input parameters of waveform
% amplitude of modulation (offset tuned manually)
am1=3.5; am2=3.5;
% relative phase
phi1=0.*pi/180;   
phi2=0.*pi/180;
% offset
offs1=2.5;offs2=2.0;

% if flag_idenwf==1; v1 and v2 have identical waveform, except offset, amplitude and phase
flag_idenwf=0;
%
flag_optimize=1;

%%% degree of mutation in amplitude and phases
mutam=0.025;  % mutation of amplitude of waveform
mutco=0.025;  % mutation of coefficient of harmonics of waveform 
mutph=2.5.*pi/180;  % mutation of phase of waveform
mutof=0.025;  % mutation of offset

%%% parameters of optimization
n_od=8;  %%% number of orders in modulation
N_GR=40; %%% number of generation
N_Geno=50; %%% number of genos
%nmax=8;     %%%% number of orders of harmonics for HB analysis
n_round=6;  %%% number of rounds of optimization

CWfreq=[3.64];

%
for n_cw=1:length(CWfreq)
    
    cwfreq=CWfreq(n_cw);
    FREQSA=['FREQ:CENT ',num2str(cwfreq),' GHz'];
    fwrite(vSA, FREQSA);   
    
Fun_SG8673B(vSG,cwfreq,power_dbm);


BestOBJ_allpass=zeros(n_round,1);

AS21_best_allpass=zeros(n_round,nmax*2+1); 
AS11_best_allpass=zeros(n_round,nmax*2+1); 

spec21_best_allpass=zeros(n_round,num_points); 
spec11_best_allpass=zeros(n_round,num_points); 

A1_best_allpass=zeros(n_round,n_od); 
A2_best_allpass=zeros(n_round,n_od); 
B1_best_allpass=zeros(n_round,n_od); 
B2_best_allpass=zeros(n_round,n_od); 
PH1_best_allpass=zeros(n_round,1); 
PH2_best_allpass=zeros(n_round,1); 
AM1_best_allpass=zeros(n_round,1); 
AM2_best_allpass=zeros(n_round,1); 
OF1_best_allpass=zeros(n_round,1); 
OF2_best_allpass=zeros(n_round,1); 


    
    %
    for pn=1:n_round

        %%%% NA: new amplitude for different orders of modulation for different
        %%%% genos, it is generated by hybridiing the best 4 and sorting the
        %%%% other genos based on performance

    NA1=zeros(N_Geno,n_od);NA2=zeros(N_Geno,n_od);
    NB1=zeros(N_Geno,n_od);NB2=zeros(N_Geno,n_od);
    NPH1=zeros(N_Geno,1);NPH2=zeros(N_Geno,1);
    NAM1=zeros(N_Geno,1);NAM2=zeros(N_Geno,1);
    NOF1=zeros(N_Geno,1);NOF2=zeros(N_Geno,1);
    

    %%%% the matrix of sorted different orders of amplitude of modulation for different genos
    %%%% according to the objective function
    SortA1=zeros(n_od,N_Geno);SortA2=zeros(n_od,N_Geno);
    SortB1=zeros(n_od,N_Geno);SortB2=zeros(n_od,N_Geno);
    SortPH1=zeros(1,N_Geno);SortPH2=zeros(1,N_Geno);
    SortAM1=zeros(1,N_Geno);SortAM2=zeros(1,N_Geno);
    SortOF1=zeros(1,N_Geno);SortOF2=zeros(1,N_Geno);
    %%% the objective function 
    BestOBJ=zeros(1,N_GR);

    %%% the S parameters of different orders of harmonics for different genos
    As21_Gn=zeros(N_Geno,nmax*2+1);
    As11_Gn=zeros(N_Geno,nmax*2+1);
    
    
    %%% spectra of different genos
    spec11_Gn=zeros(N_Geno,num_points);
    spec21_Gn=zeros(N_Geno,num_points);

    %%% S parameters for the best geno in each generation
    Best_As21=zeros(N_GR,nmax*2+1);
    Best_As11=zeros(N_GR,nmax*2+1);
 
    Best_spec21=zeros(N_GR,num_points);
    Best_spec11=zeros(N_GR,num_points);
    %%% amplitude and phase for the best geno in each generation
    Best_A1=zeros(n_od,N_GR);
    Best_A2=zeros(n_od,N_GR);

    Best_B1=zeros(n_od,N_GR);
    Best_B2=zeros(n_od,N_GR);

    Best_PH1=zeros(1,N_GR);
    Best_PH2=zeros(1,N_GR);

    Best_AM1=zeros(1,N_GR);
    Best_AM2=zeros(1,N_GR);
    
    Best_OF1=zeros(1,N_GR);
    Best_OF2=zeros(1,N_GR);

    %%% amplitude of modulation harmonics for each geno
    A1=zeros(N_Geno,n_od);B1=zeros(N_Geno,n_od);PH1=zeros(N_Geno,1);AM1=zeros(N_Geno,1);OF1=zeros(N_Geno,1);
    A2=zeros(N_Geno,n_od);B2=zeros(N_Geno,n_od);PH2=zeros(N_Geno,1);AM2=zeros(N_Geno,1);OF2=zeros(N_Geno,1);
    
    %%% best four genos
    BestA1=zeros(4,n_od);BestA2=zeros(4,n_od);
    BestB1=zeros(4,n_od);BestB2=zeros(4,n_od);
    BestPH1=zeros(4,1);BestPH2=zeros(4,1);
    BestAM1=zeros(4,1);BestAM2=zeros(4,1);
    BestOF1=zeros(4,1);BestOF2=zeros(4,1);
    
    %%% define the coefficient of input waveform
    % for channel 1
    a1_0=[1,random('unif',-mutco,mutco,1,n_od-1)];  %%%% initial amplitude for different orders
    b1_0=[1,random('unif',-mutco,mutco,1,n_od-1)];  %%%% initial amplitude for different orders
    ph1_0=phi1+0.*random('unif',-mutph,mutph,1,1);  %%%% initial phase for different orders
    % for channel 2
    a2_0=[1,random('unif',-mutco,mutco,1,n_od-1)];  %%%% initial amplitude for different orders
    b2_0=[1,random('unif',-mutco,mutco,1,n_od-1)];  %%%% initial amplitude for different orders
    ph2_0=phi2+random('unif',-mutph,mutph,1,1);  %%%% initial phase for different orders

    am1_0=am1.*(1+random('unif',-mutam,mutam,1,1));
    am2_0=am2.*(1+random('unif',-mutam,mutam,1,1));
    offs1_0=offs1.*(1+random('unif',-mutof,mutof,1,1))+random('unif',-mutof,mutof,1,1);
    offs2_0=offs2.*(1+random('unif',-mutof,mutof,1,1))+random('unif',-mutof,mutof,1,1);
                         
    
   %
        %%%%% Generation
        for n_gr=1:1:N_GR

             %%%%% Geno
                for n_geno=1:1:N_Geno


                      %%% for the second generation use new genos formed based on the last
                      %%% generation
                    if n_gr>1  

                        a1_0=NA1(n_geno,:); a2_0=NA2(n_geno,:);
                        b1_0=NB1(n_geno,:); b2_0=NB2(n_geno,:); 
                        ph1_0=NPH1(n_geno,:); ph2_0=NPH2(n_geno,:); 
                        am1_0=NAM1(n_geno,:);am2_0=NAM2(n_geno,:);
                        offs1_0=NOF1(n_geno,:);offs2_0=NOF2(n_geno,:);

                    end


                  %%% for geno number larger than 5, introduce mutation
                      if n_geno>4
                        a1=a1_0+random('unif',-mutco,mutco,1,n_od);
                        a2=a2_0+random('unif',-mutco,mutco,1,n_od);
                        b1=b1_0+random('unif',-mutco,mutco,1,n_od);
                        b2=b2_0+random('unif',-mutco,mutco,1,n_od);

                        ph1=ph1_0+0.*random('unif',-mutph,mutph,1,1);
                        ph2=ph2_0+random('unif',-mutph,mutph,1,1);

                        am1=am1_0.*(1+random('unif',-mutam,mutam,1,1));
                        am2=am2_0.*(1+random('unif',-mutam,mutam,1,1));
                        
                        offs1=offs1_0.*(1+random('unif',-mutof,mutof,1,1))+random('unif',-mutof,mutof,1,1);
                        offs2=offs2_0.*(1+random('unif',-mutof,mutof,1,1))+random('unif',-mutof,mutof,1,1);
     
                      % for geno number <4, use the hybrid geno without mutation
                      else
                        a1=a1_0;a2=a2_0;
                        b1=b1_0;b2=b2_0;
                        ph1=ph1_0;ph2=ph2_0;
                        am1=am1_0;am2=am2_0;
                        offs1=offs1_0;offs2=offs2_0;
                      end
                      
                      
                      
                % define the spectral component of modulation
                for n=1:n_od 
                sign1_od(n,:)=a1(n).*sin(n.*(2*pi.*Freq.*t+ph1))+b1(n).*cos(n.*(2*pi.*Freq.*t+ph1));  
                
                if flag_idenwf==1
                    
                 a2(n)=a1(n);b2(n)=b1(n);   
                end
                
                
                sign2_od(n,:)=a2(n).*sin(n.*(2*pi.*Freq.*t+ph2))+b2(n).*cos(n.*(2*pi.*Freq.*t+ph2));
                end
                
                % total signal
                signal1=sum(sign1_od);
                signal2=sum(sign2_od);
                % normalized signal
                signal_1n=signal1./max(abs(signal1));
                signal_2n=signal2./max(abs(signal2));

                % write signal to AFG
                Fun_AFG(vFG,signal_1n,signal_2n,am1,am2,offs1,offs2);
                %fclose(vFG);

                % read spectrum from SA 
                % for S21
                line0=1;line1=0;
                USB6525(sUSB,line0,line1);
                spec21=Fun_SA(vSA,num_points);                
                As21=spec21(peakposition);
                
                line0=0;line1=1;
                USB6525(sUSB,line0,line1);
                spec11=Fun_SA(vSA,num_points);
                As11=spec11(peakposition);
                
                As21_linear=10.^(As21./10);
                As11_linear=10.^((As11+18.2)./10);
                 
                %figure(1)
                %plot(spec);hold on;
                %plot(peakposition,As21,'o');
                
                %%%% objective function define the order of harmonic that requires maximum
                %%%% efficiency. -As11_linear(nmax+1) is to substract 0
                %%%% order if we only care single sideband
                OBJ11(n_geno)=As21_linear(n_objhm)./As11_linear(n_objhm+2);
                OBJ21(n_geno)=(As21_linear(n_objhm)+1.*As11_linear(n_objhm+2))./(sum(As21_linear+As11_linear)); 
                
                OBJ(n_geno)=min(OBJ11(n_geno),1/OBJ11(n_geno)).*OBJ21(n_geno);
                % Record the waveform parameters
                A1(n_geno,:)=a1;B1(n_geno,:)=b1;PH1(n_geno,:)=ph1;AM1(n_geno,:)=am1;OF1(n_geno,:)=offs1;
                A2(n_geno,:)=a2;B2(n_geno,:)=b2;PH2(n_geno,:)=ph2;AM2(n_geno,:)=am2;OF2(n_geno,:)=offs2;

                % Record the spectrum
                As21_Gn(n_geno,:)=As21;
                As11_Gn(n_geno,:)=As11;

                spec11_Gn(n_geno,:)=spec11;
                spec21_Gn(n_geno,:)=spec21;
                end
         
                
        % sort the objective function        
        [Sobj,Cn]=sort(OBJ);

        %%% Sort the parameter according the objective function achieved
        SortA1(:,:)=A1(Cn,:).'; 
        SortB1(:,:)=B1(Cn,:).';
        SortPH1(:,:)=PH1(Cn,:).'; 
        SortAM1(:,:)=AM1(Cn,:).'; 
        SortOF1(:,:)=OF1(Cn,:).'; 
        
        SortA2(:,:)=A2(Cn,:).'; 
        SortB2(:,:)=B2(Cn,:).'; 
        SortPH2(:,:)=PH2(Cn,:).'; 
        SortAM2(:,:)=AM2(Cn,:).';
        SortOF2(:,:)=OF2(Cn,:).'; 
        
        % record the best spectrum for each generation 
        BestOBJ(n_gr)=Sobj(end);
        Best_As21(n_gr,:)=As21_Gn(Cn(end),:);
        Best_As11(n_gr,:)=As11_Gn(Cn(end),:);

        Best_spec21(n_gr,:)=spec21_Gn(Cn(end),:);
        Best_spec11(n_gr,:)=spec11_Gn(Cn(end),:);

        % record the best parameter for each generation
        Best_A1(:,n_gr)=SortA1(:,end);
        Best_B1(:,n_gr)=SortB1(:,end);
        Best_PH1(:,n_gr)=SortPH1(:,end);
        Best_AM1(:,n_gr)=SortAM1(:,end);
        Best_OF1(:,n_gr)=SortOF1(:,end);
        
        Best_A2(:,n_gr)=SortA2(:,end);
        Best_B2(:,n_gr)=SortB2(:,end);
        Best_PH2(:,n_gr)=SortPH2(:,end);
        Best_AM2(:,n_gr)=SortAM2(:,end);
        Best_OF2(:,n_gr)=SortOF2(:,end);
        

        %%% Choose the best four parameters for the current generation
        BestA1(1:4,:)=SortA1(:,end-3:end).'; 
        BestB1(1:4,:)=SortB1(:,end-3:end).'; 
        BestPH1(1:4,:)=SortPH1(:,end-3:end).'; 
        BestAM1(1:4,:)=SortAM1(:,end-3:end).';
        BestOF1(1:4,:)=SortOF1(:,end-3:end).';
        
        BestA2(1:4,:)=SortA2(:,end-3:end).'; 
        BestB1(1:4,:)=SortB2(:,end-3:end).'; 
        BestPH2(1:4,:)=SortPH2(:,end-3:end).'; 
        BestAM2(1:4,:)=SortAM2(:,end-3:end).'; 
        BestOF2(1:4,:)=SortOF2(:,end-3:end).';
        
        %%% Generate new generation via hybridization
        
        % waveform 1
        NA1(1,:)=(BestA1(1,:)+BestA1(2,:))/2;NA1(2,:)=(BestA1(2,:)+BestA1(3,:))/2;
        NA1(3,:)=(BestA1(3,:)+BestA1(4,:))/2;NA1(4,:)=(BestA1(4,:)+BestA1(1,:))/2;
        
        NB1(1,:)=(BestB1(1,:)+BestB1(2,:))/2;NB1(2,:)=(BestB1(2,:)+BestB1(3,:))/2;
        NB1(3,:)=(BestB1(3,:)+BestB1(4,:))/2;NB1(4,:)=(BestB1(4,:)+BestB1(1,:))/2;

        NPH1(1,:)=(BestPH1(1,:)+BestPH1(2,:))/2;NPH1(2,:)=(BestPH1(2,:)+BestPH1(3,:))/2;
        NPH1(3,:)=(BestPH1(3,:)+BestPH1(4,:))/2;NPH1(4,:)=(BestPH1(4,:)+BestPH1(1,:))/2;

        NAM1(1,:)=(BestAM1(1,:)+BestAM1(2,:))/2;NAM1(2,:)=(BestAM1(2,:)+BestAM1(3,:))/2;
        NAM1(3,:)=(BestAM1(3,:)+BestAM1(4,:))/2;NAM1(4,:)=(BestAM1(4,:)+BestAM1(1,:))/2;
        
        NOF1(1,:)=(BestOF1(1,:)+BestOF1(2,:))/2;NOF1(2,:)=(BestOF1(2,:)+BestOF1(3,:))/2;
        NOF1(3,:)=(BestOF1(3,:)+BestOF1(4,:))/2;NOF1(4,:)=(BestOF1(4,:)+BestOF1(1,:))/2;
        
        NA1(5:end,:)=SortA1(:,5:end).';
        NB1(5:end,:)=SortB1(:,5:end).';
        NPH1(5:end,:)=SortPH1(:,5:end).';
        NAM1(5:end,:)=SortAM1(:,5:end).';
        NOF1(5:end,:)=SortOF1(:,5:end).';
        
                
        % waveform 2
        NA2(1,:)=(BestA2(1,:)+BestA2(2,:))/2;NA2(2,:)=(BestA2(2,:)+BestA2(3,:))/2;
        NA2(3,:)=(BestA2(3,:)+BestA2(4,:))/2;NA2(4,:)=(BestA2(4,:)+BestA2(1,:))/2;
        
        NB2(1,:)=(BestB2(1,:)+BestB2(2,:))/2;NB1(2,:)=(BestB2(2,:)+BestB2(3,:))/2;
        NB2(3,:)=(BestB2(3,:)+BestB2(4,:))/2;NB1(4,:)=(BestB2(4,:)+BestB2(1,:))/2;

        NPH2(1,:)=(BestPH2(1,:)+BestPH2(2,:))/2;NPH2(2,:)=(BestPH2(2,:)+BestPH2(3,:))/2;
        NPH2(3,:)=(BestPH2(3,:)+BestPH2(4,:))/2;NPH2(4,:)=(BestPH2(4,:)+BestPH2(1,:))/2;

        NAM2(1,:)=(BestAM2(1,:)+BestAM2(2,:))/2;NAM2(2,:)=(BestAM2(2,:)+BestAM2(3,:))/2;
        NAM2(3,:)=(BestAM2(3,:)+BestAM2(4,:))/2;NAM2(4,:)=(BestAM2(4,:)+BestAM2(1,:))/2;
        
        NA2(5:end,:)=SortA2(:,5:end).';
        NB2(5:end,:)=SortB2(:,5:end).';
        NPH2(5:end,:)=SortPH2(:,5:end).';
        NAM2(5:end,:)=SortAM2(:,5:end).';
        NOF2(5:end,:)=SortOF2(:,5:end).';
        
        
        if n_gr>4 
            
            % sort all the best geno achieved in each generation so far
            [S_bestobj,Cnbest]=sort(BestOBJ);
            
            Bestsofar_A1=Best_A1(:,Cnbest);
            Bestsofar_B1=Best_B1(:,Cnbest);
            Bestsofar_PH1=Best_PH1(:,Cnbest);
            Bestsofar_AM1=Best_AM1(:,Cnbest);
            Bestsofar_OF1=Best_OF1(:,Cnbest);
            
            Bestsofar_A2=Best_A2(:,Cnbest);
            Bestsofar_B2=Best_B2(:,Cnbest);
            Bestsofar_PH2=Best_PH2(:,Cnbest);
            Bestsofar_AM2=Best_AM2(:,Cnbest);
            Bestsofar_OF2=Best_OF2(:,Cnbest);
            
            % choose the best 4 as source of mutation for the new
            % generation, this can avoid degration if objective function
            % becomes worse as the system evolves
            
        NA1(5:8,:)=  Bestsofar_A1(:,end-3:end).';
        NB1(5:8,:)=  Bestsofar_B1(:,end-3:end).';
        NPH1(5:8,:)=  Bestsofar_PH1(:,end-3:end).';
        NAM1(5:8,:)=  Bestsofar_AM1(:,end-3:end).';
        NOF1(5:8,:)=  Bestsofar_OF1(:,end-3:end).';
        
        NA2(5:8,:)=  Bestsofar_A2(:,end-3:end).';
        NB2(5:8,:)=  Bestsofar_B2(:,end-3:end).';
        NPH2(5:8,:)=  Bestsofar_PH2(:,end-3:end).';
        NAM2(5:8,:)=  Bestsofar_AM2(:,end-3:end).';
        NOF2(5:8,:)=  Bestsofar_OF2(:,end-3:end).';
            
                              
        end
        
        
        if pn>1
            
        NA1(9:9+pn-2,:)=A1_best_allpass(1:pn-1,:);
        NB1(9:9+pn-2,:)=B1_best_allpass(1:pn-1,:);
        NPH1(9:9+pn-2,:)=PH1_best_allpass(1:pn-1,:);
        NAM1(9:9+pn-2,:)=AM1_best_allpass(1:pn-1,:);
        NOF1(9:9+pn-2,:)=OF1_best_allpass(1:pn-1,:);
        
        NA2(9:9+pn-2,:)=A2_best_allpass(1:pn-1,:);
        NB2(9:9+pn-2,:)=B2_best_allpass(1:pn-1,:);
        NPH2(9:9+pn-2,:)=PH2_best_allpass(1:pn-1,:);
        NAM2(9:9+pn-2,:)=AM2_best_allpass(1:pn-1,:);
        NOF2(9:9+pn-2,:)=OF2_best_allpass(1:pn-1,:); 
                        
        end
        
        % draw the best waveform and spectrum
        
            for n=1:n_od 
                    sign1_best(n,:)=Best_A1(n,n_gr).*sin(n.*(2*pi.*Freq.*t+Best_PH1(n_gr)))+Best_B1(n,n_gr).*cos(n.*(2*pi.*Freq.*t+Best_PH1(n_gr)));  
                    sign2_best(n,:)=Best_A2(n,n_gr).*sin(n.*(2*pi.*Freq.*t+Best_PH2(n_gr)))+Best_B2(n,n_gr).*cos(n.*(2*pi.*Freq.*t+Best_PH2(n_gr)));
            end
                
                % total signal
                signal1_best=sum(sign1_best);
                signal2_best=sum(sign2_best);
                % normalized signal
                signal_1n_best=signal1_best./max(abs(signal1_best));
                signal_2n_best=signal2_best./max(abs(signal2_best));
        
                figure(110)
                subplot(1,3,1)
                plot(t,signal_1n_best,'r');hold on;
                plot(t,signal_2n_best,'b');hold off;

                subplot(1,3,2)
                stem(Best_As21(n_gr,:),'*')
                grid on
                
                subplot(1,3,3)
                stem(Best_As11(n_gr,:),'*')
                grid on
                
                
                figure (111)
                plot(BestOBJ,'-o'); 
        
        end

    %
    [MM,bn]=max(BestOBJ);

    BestOBJ_allpass(pn,:)=MM;
    AS21_best_allpass(pn,:)=Best_As21(bn,:);
    AS11_best_allpass(pn,:)=Best_As11(bn,:);
    
    spec21_best_allpass(pn,:)=Best_spec21(bn,:);
    spec11_best_allpass(pn,:)=Best_spec11(bn,:);
    
    
    
    A1_best_allpass(pn,:)=Best_A1(:,bn).';
    B1_best_allpass(pn,:)=Best_B1(:,bn).';
    PH1_best_allpass(pn,:)=Best_PH1(:,bn).';
    AM1_best_allpass(pn,:)=Best_AM1(:,bn).';
    OF1_best_allpass(pn,:)=Best_OF1(:,bn).';
    
    A2_best_allpass(pn,:)=Best_A2(:,bn).';
    B2_best_allpass(pn,:)=Best_B2(:,bn).';
    PH2_best_allpass(pn,:)=Best_PH2(:,bn).';
    AM2_best_allpass(pn,:)=Best_AM2(:,bn).';
    OF2_best_allpass(pn,:)=Best_OF2(:,bn).';
    
    
            for n=1:n_od 
                    sign1_best_allpass(n,:)=A1_best_allpass(pn,n).*sin(n.*(2*pi.*Freq.*t+PH1_best_allpass(pn)))+B1_best_allpass(pn,n).*cos(n.*(2*pi.*Freq.*t+PH1_best_allpass(pn)));  
                    sign2_best_allpass(n,:)=A2_best_allpass(pn,n).*sin(n.*(2*pi.*Freq.*t+PH2_best_allpass(pn)))+B2_best_allpass(pn,n).*cos(n.*(2*pi.*Freq.*t+PH2_best_allpass(pn)));
            end
                
                % total signal
                signal1_best_allpass=sum(sign1_best_allpass);
                signal2_best_allpass=sum(sign2_best_allpass);
                % normalized signal
                signal_1n_best_allpass(pn,:)=signal1_best_allpass./max(abs(signal1_best_allpass));
                signal_2n_best_allpass(pn,:)=signal2_best_allpass./max(abs(signal2_best_allpass));
                
                V1_allpass(pn,:)=0.5*AM1_best_allpass(pn,:).*signal_1n_best_allpass(pn,:)+OF1_best_allpass(pn,:);
                V2_allpass(pn,:)=0.5*AM2_best_allpass(pn,:).*signal_2n_best_allpass(pn,:)+OF2_best_allpass(pn,:);
      
                
                
    end

    
    %%
    
    BestOBJ_allpass_cwfr(:,:,n_cw)=BestOBJ_allpass;
    
    AS21_best_allpass_cwfr(:,:,n_cw)=AS21_best_allpass;
    AS11_best_allpass_cwfr(:,:,n_cw)=AS11_best_allpass;
    
    spec21_best_allpass_cwfr(:,:,n_cw)=spec21_best_allpass;
    spec11_best_allpass_cwfr(:,:,n_cw)=spec11_best_allpass; 
    
    A1_best_allpass_cwfr(:,:,n_cw)=A1_best_allpass;
    A2_best_allpass_cwfr(:,:,n_cw)=A2_best_allpass;
    B1_best_allpass_cwfr(:,:,n_cw)=B1_best_allpass;
    B2_best_allpass_cwfr(:,:,n_cw)=B2_best_allpass;
    PH1_best_allpass_cwfr(:,:,n_cw)=PH1_best_allpass;
    PH2_best_allpass_cwfr(:,:,n_cw)=PH2_best_allpass;
    
    AM1_best_allpass_cwfr(:,:,n_cw)=AM1_best_allpass;
    AM2_best_allpass_cwfr(:,:,n_cw)=AM2_best_allpass;
    OF1_best_allpass_cwfr(:,:,n_cw)=OF1_best_allpass;
    OF2_best_allpass_cwfr(:,:,n_cw)=OF2_best_allpass;
    
    
    V1_allpass_cwfr(:,:,n_cw)=V1_allpass;
    V2_allpass_cwfr(:,:,n_cw)=V2_allpass;
    
    
    [cm,ci]=max(BestOBJ_allpass)
    
    a1=A1_best_allpass(ci,:);
    a2=A2_best_allpass(ci,:);
    b1=B1_best_allpass(ci,:);
    b2=B2_best_allpass(ci,:);
    ph1=PH1_best_allpass(ci,:);
    ph2=PH2_best_allpass(ci,:);
    
    am1=AM1_best_allpass(ci,:);
    am2=AM2_best_allpass(ci,:);
    offs1=OF1_best_allpass(ci,:);
    offs2=OF2_best_allpass(ci,:);
    
    
    DPH=[0:10:180].*pi/180;
    
    for ndph=1:length(DPH)
        
      dph=DPH(ndph);  
        
        
        for n=1:n_od 
        sign1_od(n,:)=a1(n).*sin(n.*(2*pi.*Freq.*t+ph1))+b1(n).*cos(n.*(2*pi.*Freq.*t+ph1));  
        sign2_od(n,:)=a2(n).*sin(n.*(2*pi.*Freq.*t+ph2+dph))+b2(n).*cos(n.*(2*pi.*Freq.*t+ph2+dph));
        end
                
        % total signal
        signal1=sum(sign1_od);
        signal2=sum(sign2_od);
        % normalized signal
        signal_1n=signal1./max(abs(signal1));
        signal_2n=signal2./max(abs(signal2));

        % write signal to AFG
        Fun_AFG(vFG,signal_1n,signal_2n,am1,am2,offs1,offs2);
        %fclose(vFG);

        % read spectrum from SA 
        % for S21
        line0=1;line1=0;
        USB6525(sUSB,line0,line1);
        spec21=Fun_SA(vSA,num_points); 
        
        As21_dph(ndph,:)=spec21(peakposition);

        line0=0;line1=1;
        USB6525(sUSB,line0,line1);
        spec11=Fun_SA(vSA,num_points);
        As11_dph(ndph,:)=spec11(peakposition);

        As21_linear_dph(ndph,:)=10.^(As21_dph(ndph,:)./10);
        As11_linear_dph(ndph,:)=10.^((As11_dph(ndph,:)+18.2)./10);
        
             


    end  
    
    figure(13)
        plot(DPH,As21_linear_dph(:,nmax),'r-*');hold on;
        plot(DPH,As21_linear_dph(:,nmax+2),'r-o');hold on;
        plot(DPH,As11_linear_dph(:,nmax),'b-*');hold on;
        plot(DPH,As11_linear_dph(:,nmax+2),'b-o');hold off;
    
    As21_dph_cwfr(:,:,n_cw)=As21_dph;
    As11_dph_cwfr(:,:,n_cw)=As11_dph;
    
    
    
    
end

%%
fre_mod=[0.01,0.05,1,2];

for n_mod=1:length(fre_mod)
   
    
    [cm,ci]=max(BestOBJ_allpass);
    
    a1=A1_best_allpass(ci,:);
    a2=A2_best_allpass(ci,:);
    b1=B1_best_allpass(ci,:);
    b2=B2_best_allpass(ci,:);
    ph1=PH1_best_allpass(ci,:);
    ph2=PH2_best_allpass(ci,:);
    
    am1=AM1_best_allpass(ci,:);
    am2=AM2_best_allpass(ci,:);
    offs1=OF1_best_allpass(ci,:);
    offs2=OF2_best_allpass(ci,:);
    
        for n=1:n_od 
        sign1_od(n,:)=a1(n).*sin(n.*(2*pi.*Freq.*t+ph1))+b1(n).*cos(n.*(2*pi.*Freq.*t+ph1));  
        sign2_od(n,:)=a2(n).*sin(n.*(2*pi.*Freq.*t+ph2))+b2(n).*cos(n.*(2*pi.*Freq.*t+ph2));
        end
                
        % total signal
        signal1=sum(sign1_od);
        signal2=sum(sign2_od);
        % normalized signal
        signal_1n=signal1./max(abs(signal1));
        signal_2n=signal2./max(abs(signal2));

        % write signal to AFG
        Fun_AFG(vFG,signal_1n,signal_2n,am1,am2,offs1,offs2);
        %fclose(vFG);
        
        
        % change modulation frequency of FG
        AFGfreq=['FREQUENCY ',num2str(fre_mod(n_mod)),'E6'];        
        fprintf(vFG,AFGfreq);
        
        % redefine spectral span of SA
        frespan=30.*fre_mod(n_mod);
        FRspan=['FREQ:SPAN ',num2str(frespan),' MHz'];
        fwrite(vSA, FRspan);
        
        bandwidth=10.*fre_mod(n_mod);
        Bandwidth=['BAND ',num2str(bandwidth),' kHz'];
        fwrite(vSA, Bandwidth);
        
        % read spectrum from SA 
        % for S21
        line0=1;line1=0;
        USB6525(sUSB,line0,line1);
        spec21=Fun_SA(vSA,num_points); 
        
        As21_modf(n_mod,:)=spec21(peakposition);

        line0=0;line1=1;
        USB6525(sUSB,line0,line1);
        spec11=Fun_SA(vSA,num_points);
        As11_modf(n_mod,:)=spec11(peakposition);

        As21_linear_modf(n_mod,:)=10.^(As21_dph(n_mod,:)./10);
        As11_linear_modf(n_mod,:)=10.^((As11_dph(n_mod,:)+18.2)./10);
        
    
end


%%
figure(9)
plot(fre_mod,As21_linear_modf(1:n_mod,nmax),'r*-');hold on;
plot(fre_mod,As21_linear_modf(1:n_mod,nmax+2),'ro-');hold on;
plot(fre_mod,As11_linear_modf(1:n_mod,nmax),'b*-');hold on;
plot(fre_mod,As11_linear_modf(1:n_mod,nmax+2),'b*-');hold off;
%%

As21_dph_cwfr_linear=10.^(As21_dph_cwfr./10);
As11_dph_cwfr_linear=10.^((As11_dph_cwfr+18.2)./10);

figure (113)
plot(BestOBJ_allpass,'-o');

figure (112)
subplot(1,2,1)
stem(10.^(AS21_best_allpass(5,:)./10),'-o');hold off;

subplot(1,2,2)
stem(10.^((AS11_best_allpass(5,:)+18.2)./10),'-o');hold off;


figure (111)
plot(BestOBJ,'-o');

%%

fr=-30:0.1:30;
 np=6;nfr=1;
 figure(99)
 subplot(1,2,1)
 plot(fr,10.^(spec21_best_allpass_cwfr(np,:,nfr)./10),'r');hold on
 plot(fr,-10.^((spec11_best_allpass_cwfr(np,:,nfr)+18.2)./10),'b');hold off
 
 figure(119)
 plot(fr,spec21_best_allpass_cwfr(np,:,nfr),'r');hold on
 plot(fr,spec11_best_allpass_cwfr(np,:,nfr)+18.84,'b');hold off
 legend('forward','backward');
 xlabel('N order')
 ylabel('sideband power (dBm)')
 grid on
 
 
  
    
    %%
    nfr=1
     figure(13)
        plot(DPH,As21_dph_cwfr_linear(:,nmax,nfr),'r-*');hold on;
        plot(DPH,As21_dph_cwfr_linear(:,nmax+2,nfr),'r-o');hold on;
        plot(DPH,As11_dph_cwfr_linear(:,nmax,nfr),'b-*');hold on;
        plot(DPH,As11_dph_cwfr_linear(:,nmax+2,nfr),'b-o');hold off;

      %%  
        for pn=1:5
            for n=1:n_od 
                    sign1_best_allpass(n,:)=A1_best_allpass(pn,n).*sin(n.*(2*pi.*Freq.*t+PH1_best_allpass(pn)))+B1_best_allpass(pn,n).*cos(n.*(2*pi.*Freq.*t+PH1_best_allpass(pn)));  
                    sign2_best_allpass(n,:)=A2_best_allpass(pn,n).*sin(n.*(2*pi.*Freq.*t+PH2_best_allpass(pn)))+B2_best_allpass(pn,n).*cos(n.*(2*pi.*Freq.*t+PH2_best_allpass(pn)));
            end
                
                % total signal
                signal1_best_allpass=sum(sign1_best_allpass);
                signal2_best_allpass=sum(sign2_best_allpass);
                % normalized signal
                signal_1n_best_allpass(pn,:)=signal1_best_allpass./max(abs(signal1_best_allpass));
                signal_2n_best_allpass(pn,:)=signal2_best_allpass./max(abs(signal2_best_allpass));
                
                V1_allpass(pn,:)=0.5*AM1_best_allpass(pn,:).*signal_1n_best_allpass(pn,:)+OF1_best_allpass(pn,:);
                V2_allpass(pn,:)=0.5*AM2_best_allpass(pn,:).*signal_2n_best_allpass(pn,:)+OF2_best_allpass(pn,:);
        end
                
%%         
n=5;        
figure(99)
plot([V1_allpass(n,:),V1_allpass(n,:)]);hold on;
plot([V2_allpass(n,:),V2_allpass(n,:)]);hold off;

V2_exp=V2_allpass(5,:).';
V1_exp=V1_allpass(5,:).';
%save V2_exp_double_bi_correct.txt -ascii V2_exp  
%save V1_exp_double_bi_correct.txt -ascii V1_exp